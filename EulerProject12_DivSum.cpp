/*#The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# What is the value of the first triangle number to have over five hundred divisors ?

1: 1
3 : 1, 3
6 : 1, 2, 3, 6
10 : 1, 2, 5, 10
15 : 1, 3, 5, 15
21 : 1, 3, 7, 21
28 : 1, 2, 4, 7, 14, 28



*/

#include <iostream>
#include "utils.h"
#include <cmath>
using namespace std;

int main() {
	int element = 1;
	int numberOfDiv = 1;
	int sumElement = 1;
	int minSumDiv = 500;
	while (numberOfDiv < minSumDiv) {
		element++;
		sumElement += element;
		numberOfDiv = numDiv(sumElement);
	}
	cout << "1+2+3+... all the way to " << element << " generates " << sumElement << ", which has " << numberOfDiv << " divisors." << endl;
	system("pause");
	return 0;
}


// Answer:	With C++, numDiv and numDiv2 does not make a difference in terms of calculation time